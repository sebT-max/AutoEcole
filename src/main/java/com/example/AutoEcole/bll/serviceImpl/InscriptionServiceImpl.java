package com.example.AutoEcole.bll.serviceImpl;

import com.example.AutoEcole.Exception.AccessDeniedException.AccessDeniedException;
import com.example.AutoEcole.Exception.StageNotFoundException.StageNotFoundException;
import com.example.AutoEcole.Exception.UserNotFound.UserNotFoundException;
import com.example.AutoEcole.api.model.Inscription.CreateInscriptionRequestBody;
import com.example.AutoEcole.api.model.Inscription.CreateInscriptionResponseBody;
import com.example.AutoEcole.bll.service.InscriptionService;
import com.example.AutoEcole.dal.domain.entity.Inscription;
import com.example.AutoEcole.dal.domain.entity.Stage;
import com.example.AutoEcole.dal.domain.entity.User;
import com.example.AutoEcole.dal.domain.enum_.InscriptionStatut;
import com.example.AutoEcole.dal.repository.CodePromoRepository;
import com.example.AutoEcole.dal.repository.InscriptionRepository;
import com.example.AutoEcole.dal.repository.StageRepository;
import com.example.AutoEcole.dal.repository.UserRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Service;
import java.util.List;

@Service
@RequiredArgsConstructor
public class InscriptionServiceImpl implements InscriptionService {

    private final UserRepository userRepository;
    private final InscriptionRepository inscriptionRepository;
    private final StageRepository stageRepository;
    private final CodePromoRepository codePromoRepository;

//    @Override
//    public CreateInscriptionResponseBody createInscription(CreateInscriptionRequestBody request, String fileName) {
//
//        User user = (User) SecurityContextHolder.getContext().getAuthentication().getPrincipal();
//
//        if (user == null) {
//            throw new UserNotFoundException("User not authenticated");
//        }
//
//        // V√©rifier que le stage existe
//        assert request.stageId() != null;
//        Stage stage = stageRepository.findById(request.stageId())
//                .orElseThrow(() -> new StageNotFoundException("Stage non trouv√©"));
//
//        /*
//        V√©rifier si un code promo est appliqu√©
//        CodePromo codePromo = null;
//        if (request.codePromo() != null) {
//            codePromo = codePromoRepository.findByCode(request.codePromo().getCode()); // Recherche par code promo
//        }
//
//
//
//        // Si un code promo est trouv√©, v√©rifier sa validit√© (expiration)
//
//        if (codePromo != null && codePromo.getExpiry_date().isAfter(LocalDate.now())) {
//            // Appliquer la r√©duction (si n√©cessaire)
//        } else if (codePromo != null) {
//            throw new RuntimeException("Le code promo est expir√©.");
//        }
//
//         */
//
//        // Cr√©er l'inscription
//        Inscription inscription = new Inscription();
//        inscription.setUser(user);
//        inscription.setStage(stage);
//        inscription.setStageType(request.stageType());
//        inscription.setInscriptionStatut(InscriptionStatut.EN_ATTENTE);
//        inscription.setLettrePdf(fileName); // üî• Correction ici : utiliser le bon fichier
//
//        // Sauvegarde en base
//        inscriptionRepository.save(inscription);
//
//        return new CreateInscriptionResponseBody(
//                "R√©servation effectu√©e avec succ√®s !",
//                inscription.getId(),
//                inscription.getUser().getId(),
//                inscription.getStage().getId(),
//                inscription.getStageType(),
//                inscription.getInscriptionStatut(),
//                inscription.getLettrePdf()
//        );
//    }

    @Override
    public CreateInscriptionResponseBody createInscription(CreateInscriptionRequestBody request, String fileName) {

        User user = (User) SecurityContextHolder.getContext().getAuthentication().getPrincipal();

        if (user == null) {
            throw new UserNotFoundException("User not authenticated");
        }

        // V√©rifier que le stage existe
        Stage stage = stageRepository.findById(request.stageId())
                .orElseThrow(() -> new StageNotFoundException("Stage non trouv√©"));

        /*
        V√©rifier si un code promo est appliqu√©
        CodePromo codePromo = null;
        if (request.codePromo() != null) {
            codePromo = codePromoRepository.findByCode(request.codePromo().getCode()); // Recherche par code promo
        }



        // Si un code promo est trouv√©, v√©rifier sa validit√© (expiration)

        if (codePromo != null && codePromo.getExpiry_date().isAfter(LocalDate.now())) {
            // Appliquer la r√©duction (si n√©cessaire)
        } else if (codePromo != null) {
            throw new RuntimeException("Le code promo est expir√©.");
        }

         */

        // Cr√©er l'inscription
        Inscription inscription = new Inscription();
        inscription.setUser(user);
        inscription.setStage(stage);
        inscription.setStageType(request.stageType());
        inscription.setInscriptionStatut(InscriptionStatut.EN_ATTENTE);
//        inscription.setLettrePdf(request.lettrePdf());

        //inscription.setCodePromo(codePromo);

        // Sauvegarder l'inscription
        inscriptionRepository.save(inscription);

        // Retourner la r√©ponse
        return new CreateInscriptionResponseBody(
                "R√©servation effectu√©e avec succ√®s !",
                inscription.getId(),
                inscription.getUser().getId(),
                inscription.getStage().getId(),
                inscription.getStageType(),
                inscription.getInscriptionStatut(),
                inscription.getLettrePdf()

                // inscription.getCodePromo()
        );
    }
    @Override
    public List<Inscription> getInscriptionsByUserId(Long userId){
        List<Inscription> inscriptions = inscriptionRepository.findByUserIdWithDetails(userId);
        if (inscriptions.isEmpty()) {
            throw new RuntimeException("Aucune r√©servation trouv√©e pour l'utilisateur avec l'ID : " + userId);
        }
        return inscriptions;
    }


    @Override
    public List<Inscription> getAllInscriptions() {
        User user = (User) SecurityContextHolder.getContext().getAuthentication().getPrincipal();

        // R√©cup√©ration de l'utilisateur authentifi√©
        if (user == null) {
            throw new UserNotFoundException("User not authenticated");
        }


        // Recherche de l'utilisateur en base
        //User user = userRepository.findByEmail(email)
          //     .orElseThrow(() -> new RuntimeException("Utilisateur non trouv√©"));

        // V√©rification si il s'agit d'un op√©rateur
        boolean isAdmin = user.getRole().getName().equals("ADMIN");

        if (!isAdmin) {
            throw new AccessDeniedException("Acc√®s refus√© : vous n'avez pas les permissions n√©cessaires.");
        }

        return inscriptionRepository.findAll();
    }





    @Override
    public Inscription getInscriptionById(Long id){
        Inscription inscriptionById = inscriptionRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("R√©servation non trouv√©"));

        return inscriptionById;
    }
}
    /*

    @Transactional
    @Override
    public boolean update(Long id, Inscription inscription) {
        Inscription inscriptionToUpdate = getBookingById(id);
        if (inscriptionToUpdate == null) {
            throw new EntityNotFoundException("R√©servation avec l'ID " + id + " non trouv√©e");
        }
        try {
            inscriptionToUpdate.setUser(inscriptionToUpdate.getUser());
            // Mettre √† jour les champs n√©cessaires
            inscriptionToUpdate.setStage(inscription.getStage());
            inscriptionToUpdate.setDateOfInscription(inscription.getDateOfInscription());
            inscriptionToUpdate.setNbrPerson(inscription.getNbrPerson());

            // Sauvegarder la r√©servation mise √† jour
            return true;
        } catch (Exception e) {
            throw new RuntimeException("Erreur lors de la mise √† jour de la r√©servation", e);
        }
    }

    @Override
    public boolean delete(Long id) {
        Optional<Inscription> booking = inscriptionRepository.findById(id);
        if (booking.isPresent()) {
            inscriptionRepository.deleteById(id);
            return true;
        }
        return false;  // Booking not found
    }

//    public Optional<Booking> getBookingWithDetails(Long id) {
//        return bookingRepository.findByIdWithDetails(id);
//    }

}

 */
